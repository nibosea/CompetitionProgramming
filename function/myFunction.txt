作った関数の説明ページ
//配列から同じ要素を取り除
#define leftunique(a) {SORT(a);(a).erase(unique((a).begin(),(a).end()),(a).end());}
factorize(long long n) :
	返り値 vector<pair<long long,int>> 
	nの素因数とそれを何個持つかを持つ
	```cpp
	vector<pair<long long,int>> factorize(long long n){
		vector<pair<long long,int>> res;
		for( long long i = 2; i*i <= n; ++i){
			if(n%i) continue ; 
			res.emplace_back(i,0);
			while(n%i == 0){
				n /= i ;
				res.back().second++;
			}
		}
		if ( n != 1) res.emplace_back(n,1);
		return res;
	}
modpow(ll a , ll n ,ll mod)
	返り値 long long 
	a ^ n % modを求めてくれる
```cpp
long long modpow(long long a, long long n, long long mod) {
	long long res = 1;
	while (n > 0) {
		if (n & 1) res = res * a % mod;
		a = a * a % mod;
		n >>= 1;
	}
	return res;
}
```

COMinit(); //nCmが求められる用になる。
```cpp
const int MAX = 510000;
const int MOD = 1000000007;

long long fac[MAX], finv[MAX], inv[MAX];

void COMinit() {
    fac[0] = fac[1] = 1;
    finv[0] = finv[1] = 1;
    inv[1] = 1;
    for (int i = 2; i < MAX; i++){
        fac[i] = fac[i - 1] * i % MOD;
        inv[i] = MOD - inv[MOD%i] * (MOD / i) % MOD;
        finv[i] = finv[i - 1] * inv[i] % MOD;
    }
}

long long COM(int n, int k){
    if (n < k) return 0;
    if (n < 0 || k < 0) return 0;
    return fac[n] * (finv[k] * finv[n - k] % MOD) % MOD;
}
```


